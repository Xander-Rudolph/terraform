name: AI Pull Review

on:
  pull_request:
      types: [opened, synchronize]
  workflow_call:

jobs:
  review-pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    services:
      ollama-model:
        image: ollama/ollama:latest
        volumes:
          - ./llama_model:/app/model
        ports:
          - 11434:11434
    steps:
      - name: Get PR details
        shell: pwsh
        id: details
        run: |
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $owner = "${{ github.repository_owner }}"
          $repo = "${{ github.event.repository.name }}"
          $pr_number = "${{ github.event.number }}"
    
          $headers = @{
              Authorization = "token $token"
              Accept        = "application/vnd.github.v3+json"
          }
    
          # Get PR details
          $pr_url = "https://api.github.com/repos/$owner/$repo/pulls/$pr_number"
          $pr_response = Invoke-RestMethod -Uri $pr_url -Headers $headers
          Write-Warning "Found the details:`n$pr_response"
          
          # Get PR files
          $files_url = "https://api.github.com/repos/$owner/$repo/pulls/$pr_number/files"
          $files_response = Invoke-RestMethod -Uri $files_url -Headers $headers
          Write-Warning "Found the files:`n$files_response"
    
          # Format the content for ChatGPT
          $content = "PR Details:`n"
          $content += "Title: $($pr_response.title)`n"
          $content += "Author: $($pr_response.user.login)`n"
          $content += "Description: $($pr_response.body)`n"
          $content += "`nFiles:`n"
          foreach ($file in $files_response) {
              $content += "Filename: $($file.filename)`n"
              $content += "Changes: $($file.changes)`n"
              $content += "Patch:`n$($file.patch)`n"
              $content += "`n"
          }
    
          echo "content=$content" >> "$GITHUB_OUTPUT"          
          Write-warning "Content to send:`n$prompt"
          
      - name: Send PR to ollama
        shell: pwsh
        id: review
        run: |
          $Uri = "http://localhost:11434"
          $model = 'llama3.1'
          $prompt = '${{ steps.details.outputs.content }}'
          $ErrorActionPreference = 'Inquire'
          $VerbosePreference = 'continue'

          Write-Verbose "Preparing to run the prompt:`n$prompt"
          Write-Verbose "Test if ollama is responding..."
          Try {
              $testService = invoke-restmethod -uri $Uri -Method get
          }
          catch {
              Write-Error "Ollama didn't respond...`n$($_.exception)"
              exit
          }
          Write-Verbose "Response:`n$testService"

          # format URI for API calls
          $baseUri = "$Uri/api"

          # Declare default splat
          $splat = @{
              Headers = @{
                  "Content-Type" = "application/json"
              }
              Method = "Post"
          }

          $splat.body = @{
              name = $model
          } | ConvertTo-Json
          Try {
              $pullModel = Invoke-WebRequest @splat -Uri "$baseUri/pull"
          }
          catch {
              Write-Error "Failed to pull model...`n$($_.exception)"
              exit
          }

          # Use Invoke-WebRequest to send the question
          $body = @{
              prompt = $prompt
              stream = $false
              model = $model
          }
          $splat.Body = $body | ConvertTo-Json
          $response = Invoke-WebRequest @splat -Uri "$baseUri/generate"

          $comment = ($response.content | ConvertFrom-Json).response
          echo "comment=$comment" >> "$GITHUB_OUTPUT"
                
      - name: Comment on PR with results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### PR review ⚙️\`${{ steps.review.outcome }}\`
            <summary>Summary</summary>
            \`\`\`
            ${{ steps.review.outputs.comment }}
            \`\`\`
      
            
            *Pusher: @${{ github.actor }}, Workflow: \`${{ github.workflow }}\`*`;
      
            // Check if comment already exists with tag
            const existingComment = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              headers: {
                accept: 'application/vnd.github.v3+json'
              }
            }).data.find(comment => comment.body.startsWith('<!-- pr-review -->'));
      
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '<!-- pr-review -->\n' + output
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '<!-- pr-review -->\n' + output
              });
            }
      # - name: Comment PR
      #   uses: thollander/actions-comment-pull-request@v2
      #   with:
      #     comment_tag: Review-Summary
      #     reactions: computer
      #     message: |
      #       ### PR review ⚙️`${{ steps.review.outcome }}`
      #       <summary>Summary</summary>
      #       ```
      #       ${{ steps.review.outputs.comment }}
      #       ```
            
      ## the commened out section below was generated with ollama... so... humans are still better
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: '3.x'

      # - name: Install Hugging Face transformers
      #   run: |
      #     python -m ensurepip
      #     python -m pip install --upgrade pip
      #     python -m pip install transformers

      # - name: Authenticate with Hugging Face
      #   run: |
      #     huggingface-cli login --token ${{ secrets.HUGGING_FACE_TOKEN }}

      # - name: Download Meta-Llama-3.1-405B model
      #   run: huggingface-cli repo download meta-llama/Meta-Llama-3.1-405B --local-dir ./llama_models

      # - name: Call LLaMA model with branch contents
      #   env:
      #     BRANCH_CONTENTS: ${{ github.event.pull_request.body }}
      #   run: |
      #     ollama --model_path ./llama_model --model_name llama-3.1-405B --prompt "$BRANCH_CONTENTS" > output.txt

      # - name: Comment on PR with results
      #   uses: actions/github-script@v6
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       github.issues.createComment({
      #         issue_number: github.context.pullRequest.number,
      #         owner: github.context.repo.owner,
      #         repo: github.context.repo.repo,
      #         body: `LLaMA 3.1-405B response: \n\`\`\`${fs.readFileSync('output.txt', 'utf8')}\`\`\``
      #       })


